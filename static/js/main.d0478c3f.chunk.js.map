{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","defaultProps","aboutText","TextForm","useState","text","setText","newText","toUpperCase","style","color","heading","value","onChange","event","target","backgroundColor","rows","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d0478c3f.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                            {/* <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                            </li> */}\r\n                        </ul>\r\n                        {/* <form className=\"d-flex\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n                        <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,                // prop types\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useState } from 'react'\r\n\r\n\r\nfunction TextForm(props) {\r\n    const [text, setText] = useState('');\r\n    let newText = text.toUpperCase();\r\n    const handleUpClick = () => {\r\n        // console.log(\"UpperCase was clicked\"+ text);\r\n        setText(newText)\r\n        props.showAlert(\"Converted to UpperCase\", \"success\");\r\n    }\r\n    const handleLoClick = () => {\r\n        // console.log(\"UpperCase was clicked\"+ text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to LowerCase\", \"success\");\r\n    }\r\n    const handleClearClick = () => {\r\n        // console.log(\"UpperCase was clicked\"+ text);\r\n        let newText = \"\";\r\n        setText(newText)\r\n        props.showAlert(\"Text cleared\", \"success\");\r\n    }\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On change\");\r\n        setText(event.target.value);\r\n        \r\n    }\r\n    const handleCopy = () => {\r\n        // console.log(\"On change\");\r\n        var text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to clipboard!\", \"success\");\r\n    }\r\n    const handleExtraSpaces = () => {\r\n        // console.log(\"On change\");\r\n        var newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Removed extra spaces\", \"success\");\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'#042743'}}id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-3\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n                <button className=\"btn btn-primary mx-3\" onClick={handleLoClick}>Convert to LowerCase</button>\r\n                <button className=\"btn btn-primary mx-3\" onClick={handleClearClick}>Clear All Text</button>\r\n                <button className=\"btn btn-primary mx-3\" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-3\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            </div>\r\n\r\n            <div className=\"container my-5\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n                <h3>Your text summary</h3>\r\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length} mintues reading time</p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length>0?text:\"Enter your text in the above text box to preview it here\"}</p>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TextForm\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{props.alert.type}</strong>: {props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from \"./components/Navbar\"\nimport TextForm from \"./components/TextForm\"\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter,\n//   Routes,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');  // Wheater dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743'\n      showAlert(\"Dark mode activated\", \"success\")\n      document.title = 'TextUtils - Dark Mode';\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light mode activated\", \"success\")\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n  return (\n    <>\n      {/* <BrowserRouter> */}\n      <Navbar title=\"TextUtilsBlog\" mode={mode} toggleMode={toggleMode} />               {/*Passing props */}\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <TextForm heading=\"Enter the text to analyze below\" mode={mode} showAlert={showAlert} />\n        {/* <About /> */}\n        {/* <Routes>\n            <Route exact path=\"/about\" element={<About />} />\n\n            <Route exact path=\"/\" element={<TextForm heading=\"Enter text to analyze\" mode={mode} showAlert={showAlert} />} />\n          </Routes> */}\n      </div>\n      {/* </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}